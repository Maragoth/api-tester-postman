{
	"info": {
		"_postman_id": "5d5cd6bf-e013-4981-adac-67ede45badca",
		"name": "API Tester Collection",
		"description": "Full test suite for DummyJSON public REST API.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "44729909",
		"_collection_link": "https://adamfedorowicz.postman.co/workspace/Adam-Fedorowicz's-Workspace~97edcec6-cb56-4235-8839-922601b0ac25/collection/44729909-5d5cd6bf-e013-4981-adac-67ede45badca?action=share&source=collection_link&creator=44729909"
	},
	"item": [
		{
			"name": "POST Login user and get token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Response has a token\", function () {\r",
							"    pm.expect(jsonData.accessToken).to.be.a('string');\r",
							"    pm.environment.set(\"authToken\", jsonData.accessToken);\r",
							"});\r",
							"\r",
							"pm.test(\"Refresh token is present\", function () {\r",
							"    pm.expect(jsonData.refreshToken).to.be.a('string');\r",
							"    pm.environment.set(\"refreshToken\", jsonData.refreshToken);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"username\": \"emilys\",\r\n  \"password\": \"emilyspass\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/user/login",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"user",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST /auth/refresh",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Access token is returned\", function () {\r",
							"    pm.expect(jsonData.accessToken).to.be.a('string');\r",
							"    pm.environment.set(\"authToken\", jsonData.accessToken); // update access token\r",
							"});\r",
							"\r",
							"pm.test(\"Refresh token is returned\", function () {\r",
							"    pm.expect(jsonData.refreshToken).to.be.a('string');\r",
							"    pm.environment.set(\"refreshToken\", jsonData.refreshToken); // update refresh token\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"refreshToken\": \"{{refreshToken}}\",\r\n  \"expiresInMins\": 30\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/auth/refresh",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"auth",
						"refresh"
					]
				}
			},
			"response": []
		},
		{
			"name": "users list",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const Ajv = require('ajv');\r",
							"const ajv = new Ajv({ allErrors: true });\r",
							"\r",
							"const schema = JSON.parse(pm.collectionVariables.get(\"userListSchema\"));\r",
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Validate user list schema\", function () {\r",
							"    const validate = ajv.compile(schema);\r",
							"    const valid = validate(jsonData);\r",
							"\r",
							"    if (!valid) {\r",
							"        console.log(\"Schema validation errors:\", validate.errors);\r",
							"    }\r",
							"\r",
							"    pm.expect(valid, \"Schema is valid\").to.be.true;\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/users",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "user \"id\"",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const Ajv = require('ajv');\r",
							"const ajv = new Ajv({ allErrors: true });\r",
							"\r",
							"const schema = JSON.parse(pm.collectionVariables.get(\"userSchema\"));\r",
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Validate single user schema\", function () {\r",
							"    const validate = ajv.compile(schema);\r",
							"    const valid = validate(jsonData);\r",
							"\r",
							"    if (!valid) {\r",
							"        console.log(\"Schema validation errors:\", validate.errors);\r",
							"    }\r",
							"\r",
							"    pm.expect(valid, \"Schema is valid\").to.be.true;\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/users/1",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"users",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Products list",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Import Ajv\r",
							"const Ajv = require('ajv');\r",
							"\r",
							"// Test 1: Status 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Test 2: Response time < 1500ms\r",
							"pm.test(\"Response time is less than 1500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
							"});\r",
							"\r",
							"// Test 3: Schema validation (Ajv + collection variable)\r",
							"pm.test(\"Response schema is valid\", function () {\r",
							"    const schemaRaw = pm.collectionVariables.get(\"productListSchema\");\r",
							"    pm.expect(schemaRaw, \"Schema must not be undefined\").to.not.be.undefined;\r",
							"\r",
							"    const schema = JSON.parse(schemaRaw);\r",
							"    const jsonData = pm.response.json();\r",
							"\r",
							"    const ajv = new Ajv({ allErrors: true });\r",
							"    const validate = ajv.compile(schema);\r",
							"    const valid = validate(jsonData);\r",
							"\r",
							"    pm.expect(valid, JSON.stringify(validate.errors, null, 2)).to.be.true;\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/products",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"products"
					]
				}
			},
			"response": []
		},
		{
			"name": "Product \"ID\"",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Import Ajv\r",
							"const Ajv = require('ajv');\r",
							"\r",
							"// Test 1: Status code is 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Test 2: Response time < 1500ms\r",
							"pm.test(\"Response time is less than 1500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
							"});\r",
							"\r",
							"// Test 3: Schema validation using collection variable\r",
							"pm.test(\"Response schema is valid\", function () {\r",
							"    const schemaRaw = pm.collectionVariables.get(\"productSchema\");\r",
							"    pm.expect(schemaRaw, \"Schema must not be undefined\").to.not.be.undefined;\r",
							"\r",
							"    const schema = JSON.parse(schemaRaw);\r",
							"    const jsonData = pm.response.json();\r",
							"\r",
							"    const ajv = new Ajv({ allErrors: true });\r",
							"    const validate = ajv.compile(schema);\r",
							"    const valid = validate(jsonData);\r",
							"\r",
							"    pm.expect(valid, JSON.stringify(validate.errors, null, 2)).to.be.true;\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/products/1",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"products",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add New Product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 1500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
							"});\r",
							"\r",
							"const Ajv = require('ajv');\r",
							"const ajv = new Ajv({ allErrors: true });\r",
							"\r",
							"let schema = pm.collectionVariables.get(\"addProductSchema\");\r",
							"if (typeof schema === \"string\") {\r",
							"    schema = JSON.parse(schema);\r",
							"}\r",
							"\r",
							"const validate = ajv.compile(schema);\r",
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Response matches the addProduct schema\", function () {\r",
							"    const valid = validate(jsonData);\r",
							"\r",
							"    if (!valid) {\r",
							"        console.log(\"Schema validation errors:\", validate.errors);\r",
							"    }\r",
							"\r",
							"    pm.expect(valid, \"Schema is valid\").to.be.true;\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"title\": \"Test Product\",\r\n  \"description\": \"Created via Postman test\",\r\n  \"price\": 99,\r\n  \"category\": \"test-category\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/products/add",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"products",
						"add"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 1500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
							"});\r",
							"\r",
							"const Ajv = require('ajv');\r",
							"const ajv = new Ajv({ allErrors: true });\r",
							"\r",
							"let schema = pm.collectionVariables.get(\"updateProductSchema\");\r",
							"if (typeof schema === \"string\") {\r",
							"    schema = JSON.parse(schema);\r",
							"}\r",
							"\r",
							"const validate = ajv.compile(schema);\r",
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Response matches the updateProduct schema\", function () {\r",
							"    const valid = validate(jsonData);\r",
							"\r",
							"    if (!valid) {\r",
							"        console.log(\"Schema validation errors:\", validate.errors);\r",
							"    }\r",
							"\r",
							"    pm.expect(valid, \"Schema is valid\").to.be.true;\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"title\": \"Updated Product\",\r\n  \"price\": 199\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/products/1",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"products",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const Ajv = require('ajv');\r",
							"const ajv = new Ajv({ allErrors: true });\r",
							"\r",
							"const schema = pm.collectionVariables.get(\"deletedProductSchema\");\r",
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Validate deleted product schema\", function () {\r",
							"    const validate = ajv.compile(JSON.parse(schema));\r",
							"    const valid = validate(jsonData);\r",
							"\r",
							"    if (!valid) {\r",
							"        console.log(\"Schema validation errors:\", validate.errors);\r",
							"    }\r",
							"\r",
							"    pm.expect(valid, \"Schema validation\").to.be.true;\r",
							"});\r",
							"\r",
							"pm.test(\"Product is marked as deleted\", function () {\r",
							"    pm.expect(jsonData.isDeleted).to.be.true;\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{base_url}}/products/1",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"products",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "User without Token",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.request.headers.upsert({\r",
							"    key: \"Authorization\",\r",
							"    value: \"\"\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is not 200 (unauthorized or restricted)\", function () {\r",
							"    pm.expect(pm.response.code).to.not.eql(200);\r",
							"});\r",
							"\r",
							"if (pm.response.text()) {\r",
							"    const jsonData = pm.response.json();\r",
							"\r",
							"    pm.test(\"Response contains user list or error\", function () {\r",
							"        if (jsonData.users) {\r",
							"            pm.expect(jsonData.users).to.be.an('array');\r",
							"        } else {\r",
							"            pm.expect(jsonData).to.have.any.keys('message', 'error');\r",
							"        }\r",
							"    });\r",
							"} else {\r",
							"    console.warn(\"Empty response body – skipping JSON checks.\");\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/users\n",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"users\n"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login with wrong password",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400 or 404\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([400, 404]);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains error message\", function () {\r",
							"    const contentType = pm.response.headers.get(\"Content-Type\");\r",
							"    \r",
							"    if (contentType && contentType.includes(\"application/json\")) {\r",
							"        const jsonData = pm.response.json();\r",
							"        pm.expect(jsonData).to.have.property(\"message\");\r",
							"    } else {\r",
							"        console.warn(\"Response is not JSON, skipping JSON validation.\");\r",
							"    }\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{base_url}}/auth/login\n",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"auth",
						"login\n"
					]
				}
			},
			"response": []
		},
		{
			"name": "Wrong User ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 1500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
							"});\r",
							"\r",
							"const Ajv = require('ajv');\r",
							"const ajv = new Ajv({ allErrors: true });\r",
							"\r",
							"let schema = pm.collectionVariables.get(\"userNotFoundSchema\");\r",
							"if (typeof schema === \"string\") {\r",
							"    schema = JSON.parse(schema);\r",
							"}\r",
							"\r",
							"const validate = ajv.compile(schema);\r",
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Response matches userNotFound schema\", function () {\r",
							"    const valid = validate(jsonData);\r",
							"\r",
							"    if (!valid) {\r",
							"        console.log(\"Schema validation errors:\", validate.errors);\r",
							"    }\r",
							"\r",
							"    pm.expect(valid, \"Schema is valid\").to.be.true;\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/users/99999",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"users",
						"99999"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Product with Missing Fields",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400 or 422\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([400, 422]);\r",
							"});\r",
							"\r",
							"const contentType = pm.response.headers.get(\"Content-Type\");\r",
							"\r",
							"if (contentType && contentType.includes(\"application/json\")) {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.test(\"Response contains error message\", function () {\r",
							"        pm.expect(jsonData).to.have.property(\"message\");\r",
							"    });\r",
							"} else {\r",
							"    console.warn(\"Response is not JSON, skipping JSON validation.\");\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/products/add",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"products",
						"add"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update invalid product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 1500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
							"});\r",
							"\r",
							"const Ajv = require('ajv');\r",
							"const ajv = new Ajv({ allErrors: true });\r",
							"\r",
							"let schema = pm.collectionVariables.get(\"productNotFoundSchema\");\r",
							"if (typeof schema === \"string\") {\r",
							"    schema = JSON.parse(schema);\r",
							"}\r",
							"\r",
							"const validate = ajv.compile(schema);\r",
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Response matches productNotFound schema\", function () {\r",
							"    const valid = validate(jsonData);\r",
							"\r",
							"    if (!valid) {\r",
							"        console.log(\"Schema validation errors:\", validate.errors);\r",
							"    }\r",
							"\r",
							"    pm.expect(valid, \"Schema is valid\").to.be.true;\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"title\": \"Invalid Update\",\r\n  \"price\": 123\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/products/99999\n",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"products",
						"99999\n"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete invalid product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 1500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
							"});\r",
							"\r",
							"const Ajv = require('ajv');\r",
							"const ajv = new Ajv({ allErrors: true });\r",
							"\r",
							"let schema = pm.collectionVariables.get(\"productNotFoundSchema\");\r",
							"if (typeof schema === \"string\") {\r",
							"    schema = JSON.parse(schema);\r",
							"}\r",
							"\r",
							"const validate = ajv.compile(schema);\r",
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Response matches productNotFound schema\", function () {\r",
							"    const valid = validate(jsonData);\r",
							"\r",
							"    if (!valid) {\r",
							"        console.log(\"Schema validation errors:\", validate.errors);\r",
							"    }\r",
							"\r",
							"    pm.expect(valid, \"Schema is valid\").to.be.true;\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/products/99999",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"products",
						"99999"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"if (pm.environment.get(\"authToken\")) {\r",
					"    pm.request.headers.upsert({\r",
					"        key: \"Authorization\",\r",
					"        value: \"Bearer \" + pm.environment.get(\"authToken\")\r",
					"    });\r",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "productSchema",
			"value": "{\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"title\": \"Single Product Schema\",\n  \"type\": \"object\",\n  \"required\": [\n    \"id\", \"title\", \"description\", \"category\", \"price\",\n    \"discountPercentage\", \"rating\", \"stock\", \"tags\",\n    \"sku\", \"weight\", \"dimensions\", \"warrantyInformation\",\n    \"shippingInformation\", \"availabilityStatus\", \"reviews\",\n    \"returnPolicy\", \"minimumOrderQuantity\", \"meta\",\n    \"images\", \"thumbnail\"\n  ],\n  \"properties\": {\n    \"id\": { \"type\": \"integer\" },\n    \"title\": { \"type\": \"string\" },\n    \"description\": { \"type\": \"string\" },\n    \"category\": { \"type\": \"string\" },\n    \"price\": { \"type\": \"number\" },\n    \"discountPercentage\": { \"type\": \"number\" },\n    \"rating\": { \"type\": \"number\" },\n    \"stock\": { \"type\": \"integer\" },\n    \"tags\": {\n      \"type\": \"array\",\n      \"items\": { \"type\": \"string\" }\n    },\n    \"brand\": { \"type\": \"string\" },\n    \"sku\": { \"type\": \"string\" },\n    \"weight\": { \"type\": \"number\" },\n    \"dimensions\": {\n      \"type\": \"object\",\n      \"required\": [\"width\", \"height\", \"depth\"],\n      \"properties\": {\n        \"width\": { \"type\": \"number\" },\n        \"height\": { \"type\": \"number\" },\n        \"depth\": { \"type\": \"number\" }\n      }\n    },\n    \"warrantyInformation\": { \"type\": \"string\" },\n    \"shippingInformation\": { \"type\": \"string\" },\n    \"availabilityStatus\": { \"type\": \"string\" },\n    \"reviews\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"object\",\n        \"required\": [\"rating\", \"comment\", \"date\", \"reviewerName\", \"reviewerEmail\"],\n        \"properties\": {\n          \"rating\": { \"type\": \"integer\" },\n          \"comment\": { \"type\": \"string\" },\n          \"date\": { \"type\": \"string\", \"format\": \"date-time\" },\n          \"reviewerName\": { \"type\": \"string\" },\n          \"reviewerEmail\": { \"type\": \"string\", \"format\": \"email\" }\n        }\n      }\n    },\n    \"returnPolicy\": { \"type\": \"string\" },\n    \"minimumOrderQuantity\": { \"type\": \"integer\" },\n    \"meta\": {\n      \"type\": \"object\",\n      \"required\": [\"createdAt\", \"updatedAt\", \"barcode\", \"qrCode\"],\n      \"properties\": {\n        \"createdAt\": { \"type\": \"string\", \"format\": \"date-time\" },\n        \"updatedAt\": { \"type\": \"string\", \"format\": \"date-time\" },\n        \"barcode\": { \"type\": \"string\" },\n        \"qrCode\": { \"type\": \"string\", \"format\": \"uri\" }\n      }\n    },\n    \"images\": {\n      \"type\": \"array\",\n      \"items\": { \"type\": \"string\", \"format\": \"uri\" }\n    },\n    \"thumbnail\": { \"type\": \"string\", \"format\": \"uri\" }\n  }\n}\n",
			"type": "string"
		},
		{
			"key": "userListSchema",
			"value": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"users\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"object\",\n        \"required\": [\"id\", \"firstName\", \"lastName\", \"age\", \"gender\", \"email\", \"username\", \"image\"],\n        \"properties\": {\n          \"id\": { \"type\": \"integer\" },\n          \"firstName\": { \"type\": \"string\" },\n          \"lastName\": { \"type\": \"string\" },\n          \"age\": { \"type\": \"integer\" },\n          \"gender\": { \"type\": \"string\" },\n          \"email\": { \"type\": \"string\" },\n          \"username\": { \"type\": \"string\" },\n          \"image\": { \"type\": \"string\", \"format\": \"uri\" }\n        }\n      }\n    },\n    \"total\": { \"type\": \"integer\" },\n    \"skip\": { \"type\": \"integer\" },\n    \"limit\": { \"type\": \"integer\" }\n  },\n  \"required\": [\"users\", \"total\", \"skip\", \"limit\"]\n}\n",
			"type": "string"
		},
		{
			"key": "userSchema",
			"value": "{\n  \"type\": \"object\",\n  \"required\": [\"id\", \"firstName\", \"lastName\", \"age\", \"gender\", \"email\", \"username\", \"image\", \"address\", \"company\", \"bank\", \"crypto\"],\n  \"properties\": {\n    \"id\": { \"type\": \"integer\" },\n    \"firstName\": { \"type\": \"string\" },\n    \"lastName\": { \"type\": \"string\" },\n    \"maidenName\": { \"type\": \"string\" },\n    \"age\": { \"type\": \"integer\" },\n    \"gender\": { \"type\": \"string\" },\n    \"email\": { \"type\": \"string\", \"format\": \"email\" },\n    \"phone\": { \"type\": \"string\" },\n    \"username\": { \"type\": \"string\" },\n    \"password\": { \"type\": \"string\" },\n    \"birthDate\": { \"type\": \"string\" },\n    \"image\": { \"type\": \"string\", \"format\": \"uri\" },\n    \"bloodGroup\": { \"type\": \"string\" },\n    \"height\": { \"type\": \"number\" },\n    \"weight\": { \"type\": \"number\" },\n    \"eyeColor\": { \"type\": \"string\" },\n    \"hair\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"color\": { \"type\": \"string\" },\n        \"type\": { \"type\": \"string\" }\n      }\n    },\n    \"ip\": { \"type\": \"string\" },\n    \"address\": {\n      \"type\": \"object\",\n      \"required\": [\"address\", \"city\", \"state\", \"postalCode\", \"country\", \"coordinates\"],\n      \"properties\": {\n        \"address\": { \"type\": \"string\" },\n        \"city\": { \"type\": \"string\" },\n        \"state\": { \"type\": \"string\" },\n        \"stateCode\": { \"type\": \"string\" },\n        \"postalCode\": { \"type\": \"string\" },\n        \"coordinates\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"lat\": { \"type\": \"number\" },\n            \"lng\": { \"type\": \"number\" }\n          }\n        },\n        \"country\": { \"type\": \"string\" }\n      }\n    },\n    \"macAddress\": { \"type\": \"string\" },\n    \"university\": { \"type\": \"string\" },\n    \"bank\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"cardExpire\": { \"type\": \"string\" },\n        \"cardNumber\": { \"type\": \"string\" },\n        \"cardType\": { \"type\": \"string\" },\n        \"currency\": { \"type\": \"string\" },\n        \"iban\": { \"type\": \"string\" }\n      }\n    },\n    \"company\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"department\": { \"type\": \"string\" },\n        \"name\": { \"type\": \"string\" },\n        \"title\": { \"type\": \"string\" },\n        \"address\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"address\": { \"type\": \"string\" },\n            \"city\": { \"type\": \"string\" },\n            \"state\": { \"type\": \"string\" },\n            \"stateCode\": { \"type\": \"string\" },\n            \"postalCode\": { \"type\": \"string\" },\n            \"coordinates\": {\n              \"type\": \"object\",\n              \"properties\": {\n                \"lat\": { \"type\": \"number\" },\n                \"lng\": { \"type\": \"number\" }\n              }\n            },\n            \"country\": { \"type\": \"string\" }\n          }\n        }\n      }\n    },\n    \"ein\": { \"type\": \"string\" },\n    \"ssn\": { \"type\": \"string\" },\n    \"userAgent\": { \"type\": \"string\" },\n    \"crypto\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"coin\": { \"type\": \"string\" },\n        \"wallet\": { \"type\": \"string\" },\n        \"network\": { \"type\": \"string\" }\n      }\n    },\n    \"role\": { \"type\": \"string\" }\n  }\n}\n",
			"type": "string"
		},
		{
			"key": "productListSchema",
			"value": "{\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"title\": \"Product List Schema\",\n  \"type\": \"object\",\n  \"required\": [\"products\", \"total\", \"skip\", \"limit\"],\n  \"properties\": {\n    \"products\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"object\",\n        \"required\": [\n          \"id\",\n          \"title\",\n          \"description\",\n          \"category\",\n          \"price\",\n          \"discountPercentage\",\n          \"rating\",\n          \"stock\",\n          \"tags\",\n          \"sku\",\n          \"weight\",\n          \"dimensions\",\n          \"warrantyInformation\",\n          \"shippingInformation\",\n          \"availabilityStatus\",\n          \"reviews\",\n          \"returnPolicy\",\n          \"minimumOrderQuantity\",\n          \"meta\",\n          \"images\",\n          \"thumbnail\"\n        ],\n        \"properties\": {\n          \"id\": { \"type\": \"integer\" },\n          \"title\": { \"type\": \"string\" },\n          \"description\": { \"type\": \"string\" },\n          \"category\": { \"type\": \"string\" },\n          \"price\": { \"type\": \"number\" },\n          \"discountPercentage\": { \"type\": \"number\" },\n          \"rating\": { \"type\": \"number\" },\n          \"stock\": { \"type\": \"integer\" },\n          \"tags\": {\n            \"type\": \"array\",\n            \"items\": { \"type\": \"string\" }\n          },\n          \"sku\": { \"type\": \"string\" },\n          \"weight\": { \"type\": \"number\" },\n          \"dimensions\": {\n            \"type\": \"object\",\n            \"required\": [\"width\", \"height\", \"depth\"],\n            \"properties\": {\n              \"width\": { \"type\": \"number\" },\n              \"height\": { \"type\": \"number\" },\n              \"depth\": { \"type\": \"number\" }\n            }\n          },\n          \"warrantyInformation\": { \"type\": \"string\" },\n          \"shippingInformation\": { \"type\": \"string\" },\n          \"availabilityStatus\": { \"type\": \"string\" },\n          \"reviews\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"object\",\n              \"required\": [\n                \"rating\",\n                \"comment\",\n                \"date\",\n                \"reviewerName\",\n                \"reviewerEmail\"\n              ],\n              \"properties\": {\n                \"rating\": { \"type\": \"integer\" },\n                \"comment\": { \"type\": \"string\" },\n                \"date\": { \"type\": \"string\", \"format\": \"date-time\" },\n                \"reviewerName\": { \"type\": \"string\" },\n                \"reviewerEmail\": { \"type\": \"string\", \"format\": \"email\" }\n              }\n            }\n          },\n          \"returnPolicy\": { \"type\": \"string\" },\n          \"minimumOrderQuantity\": { \"type\": \"integer\" },\n          \"meta\": {\n            \"type\": \"object\",\n            \"required\": [\"createdAt\", \"updatedAt\", \"barcode\", \"qrCode\"],\n            \"properties\": {\n              \"createdAt\": { \"type\": \"string\", \"format\": \"date-time\" },\n              \"updatedAt\": { \"type\": \"string\", \"format\": \"date-time\" },\n              \"barcode\": { \"type\": \"string\" },\n              \"qrCode\": { \"type\": \"string\", \"format\": \"uri\" }\n            }\n          },\n          \"images\": {\n            \"type\": \"array\",\n            \"items\": { \"type\": \"string\", \"format\": \"uri\" }\n          },\n          \"thumbnail\": { \"type\": \"string\", \"format\": \"uri\" }\n        }\n      }\n    },\n    \"total\": { \"type\": \"integer\" },\n    \"skip\": { \"type\": \"integer\" },\n    \"limit\": { \"type\": \"integer\" }\n  }\n}\n",
			"type": "string"
		},
		{
			"key": "deletedProductSchema",
			"value": "{\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"title\": \"DeletedProduct\",\n  \"type\": \"object\",\n  \"required\": [\"id\", \"title\", \"isDeleted\", \"deletedOn\"],\n  \"properties\": {\n    \"id\": { \"type\": \"integer\" },\n    \"title\": { \"type\": \"string\" },\n    \"isDeleted\": { \"type\": \"boolean\" },\n    \"deletedOn\": { \"type\": \"string\", \"format\": \"date-time\" }\n  }\n}\n",
			"type": "string"
		},
		{
			"key": "addProductSchema",
			"value": "{\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"title\": \"Add Product Schema\",\n  \"type\": \"object\",\n  \"required\": [\"id\", \"title\", \"price\", \"description\", \"category\"],\n  \"properties\": {\n    \"id\": {\n      \"type\": \"integer\"\n    },\n    \"title\": {\n      \"type\": \"string\"\n    },\n    \"price\": {\n      \"type\": \"number\"\n    },\n    \"description\": {\n      \"type\": \"string\"\n    },\n    \"category\": {\n      \"type\": \"string\"\n    }\n  },\n  \"additionalProperties\": false\n}\n",
			"type": "string"
		},
		{
			"key": "updateProductSchema",
			"value": "{\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"title\": \"Update Product Schema\",\n  \"type\": \"object\",\n  \"required\": [\n    \"id\",\n    \"title\",\n    \"price\",\n    \"discountPercentage\",\n    \"stock\",\n    \"rating\",\n    \"images\",\n    \"thumbnail\",\n    \"description\",\n    \"brand\",\n    \"category\"\n  ],\n  \"properties\": {\n    \"id\": { \"type\": \"integer\" },\n    \"title\": { \"type\": \"string\" },\n    \"price\": { \"type\": \"number\" },\n    \"discountPercentage\": { \"type\": \"number\" },\n    \"stock\": { \"type\": \"integer\" },\n    \"rating\": { \"type\": \"number\" },\n    \"images\": {\n      \"type\": \"array\",\n      \"items\": { \"type\": \"string\", \"format\": \"uri\" }\n    },\n    \"thumbnail\": { \"type\": \"string\", \"format\": \"uri\" },\n    \"description\": { \"type\": \"string\" },\n    \"brand\": { \"type\": \"string\" },\n    \"category\": { \"type\": \"string\" }\n  },\n  \"additionalProperties\": false\n}\n",
			"type": "string"
		},
		{
			"key": "userNotFoundSchema",
			"value": "{\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"title\": \"User Not Found Schema\",\n  \"type\": \"object\",\n  \"required\": [\"message\"],\n  \"properties\": {\n    \"message\": { \"type\": \"string\" }\n  },\n  \"additionalProperties\": false\n}\n",
			"type": "string"
		},
		{
			"key": "productNotFoundSchema",
			"value": "{\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"title\": \"Product Not Found Schema\",\n  \"type\": \"object\",\n  \"required\": [\"message\"],\n  \"properties\": {\n    \"message\": { \"type\": \"string\" }\n  },\n  \"additionalProperties\": false\n}\n",
			"type": "string"
		}
	]
}